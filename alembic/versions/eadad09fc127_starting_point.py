"""starting point

Revision ID: eadad09fc127
Revises:
Create Date: 2025-03-13 15:50:03.183206

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "eadad09fc127"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "secret_content",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("uuid", name="secret_content_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "secret",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "creation", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "destruction", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("usage_count", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("usage_limit", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_uuid", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("content_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["content_id"], ["secret_content.uuid"], name="secret_content_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_uuid"], ["user.uuid"], name="secret_user_uuid_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", name="secret_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_secret_usage_limit", "secret", ["usage_limit"], unique=False)
    op.create_index("ix_secret_usage_count", "secret", ["usage_count"], unique=False)
    op.create_index(
        "ix_secret_hashed_password", "secret", ["hashed_password"], unique=False
    )
    op.create_index("ix_secret_destruction", "secret", ["destruction"], unique=False)
    op.create_index("ix_secret_creation", "secret", ["creation"], unique=False)
    op.create_table(
        "secret_file_content",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("content", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column("filename", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["uuid"], ["secret_content.uuid"], name="secret_file_content_uuid_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", name="secret_file_content_pkey"),
    )
    op.create_table(
        "user",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_admin", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("uuid", name="user_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_user_username", "user", ["username"], unique=True)
    op.create_table(
        "secret_text_content",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("content", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["uuid"], ["secret_content.uuid"], name="secret_text_content_uuid_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", name="secret_text_content_pkey"),
    )
    op.create_table(
        "secretLogs",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "action",
            postgresql.ENUM(
                "CREATE", "GET", "EXPIRE", "DELETE", name="secretlogactionenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "timestamp",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("secret_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["secret_id"], ["secret.uuid"], name="secretLogs_secret_id_fkey"
        ),
        sa.PrimaryKeyConstraint("uuid", name="secretLogs_pkey"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("secretLogs")
    op.drop_table("secret_text_content")
    op.drop_index("ix_user_username", table_name="user")
    op.drop_table("user")
    op.drop_table("secret_file_content")
    op.drop_index("ix_secret_creation", table_name="secret")
    op.drop_index("ix_secret_destruction", table_name="secret")
    op.drop_index("ix_secret_hashed_password", table_name="secret")
    op.drop_index("ix_secret_usage_count", table_name="secret")
    op.drop_index("ix_secret_usage_limit", table_name="secret")
    op.drop_table("secret")
    op.drop_table("secret_content")
    # ### end Alembic commands ###
